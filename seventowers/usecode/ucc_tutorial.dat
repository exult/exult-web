<?php
	$eua = inline_code("execute_usecode_array");
	$deua = inline_code("delayed_execute_usecode_array");
	$ucc = add_tip("UCC", "Usecode C");
	$si = add_tip("SI", "Serpent Isle");
	make_header("$ucc Scripts and execute_usecode_array intrinsic");
	
	make_header("About this document", 1);
	text(
		array(
            "This document can be freely distributed as long as its kept mostly intact. Any spelling mistakes can be corrected, but I'd appreciate being notified about them so the quality of the document can be improved...",
            "A lot of the information in this file comes from the Exult source code, specifically from the 'ucparse.yy' and 'ucscriptop.h' files. Any errors are likely my fault, though.",
            "This document liberally borrows ideas from Wizardry Dragon's old usecode tutorial; I don't know if it has a home anywhere in the internet, though, or I'd link to it.",
            "Any suggestions for improving this document will be greatly appreciated!",
        ), 0
    );

	make_header("About $ucc Syntax", 1);
	text(
		array(
			"As the name implies, $ucc syntax is heavily based on that of the C/C++ programming languages. But do not let this deter you, though; it is actually far more simple than that.",
			"$ucc has seven basic syntax elements: compiler directives, declarations, expressions, ordinary statements, control-flow statements, intrinsics and script blocks. There is an upcoming reference which will go into much more depth on each of those topics; the present document will be a more \"light\" version.",
			"But before we go there, "
			), 0
		);

	make_header("Compiler directives", 1);

	text(
		array(
			"Compiler directives are a way to alter the way the $ucc compiler does its job of generating usecode. There are a total of four directives, two of which are almost mandatory, one which is extremelly useful and one which is nearly useless.",
			"The following are the \"mandatory\" directives: #game and #autonumber. It is " . bold("strongly") . " reccommended that they should be used in your code, and that they are placed as early as possible. So you should do so. If you are writing usecode for BG, add this line before everything else in your usecode:",,
			), 0
		);
	code_block("#game \"blackgate\"");
	test("If, instead, you are writing usecode for SI, you should put the following line at the top:"
	code_block("#game \"serpentisle\"");
	text(
		array(
			"Simply put, this will tell the $ucc compiler which set of intrinsics you are using. You " . italic("can") . " get away with passing a \"-s\" switch to compile SI usecode, which is why I termed this directive as being only \"almost\" mandatory.",
			"The other almost mandatory directive should also be placed as early as possible in the code, preferrably near #game. So go ahead and place the following line just under #game:",
			), 0
		);
	code_block("#autonumber 0xA00");
	text(
		array(
			"Simply put, this will tell the $ucc compiler which set of intrinsics you are using. You " . italic("can") . " get away with passing a \"-s\" switch to compile SI usecode, which is why I termed this directive as being only \"almost\" mandatory.",
			"The other almost mandatory directive should also be placed as early as possible in the code, preferrably near #game. So go ahead and place the following line just under #game:",
			), 0
		);


	code_file("erethian_an_ailem_0.uc", false, true, 4);
	text("It is far from obvious what it actually does. Fortunately, we have an alternative to using the '$eua' intrinsic: $ucc has a set of scripting functions which are converted to '$eua' calls upon compilation. The good point is that $ucc scripts are much more readable and understandable than '$eua' calls, which only helps writing new usecode. There still is, however, one command (repeat2) that is available for '$eua' intrinsic but isn't for $ucc scripts. But this does not need to remain true for long...", 0);

	make_header("Script Blocks and Commands", 1);
	text(
		array(
			"A bit of nomenclature, for convenience: I will use 'opcode' to mean an element of an usecode array which determines what is to be done; all other elements of the usecode array will be called 'parameters'. An opcode with all its needed parameters will be called a 'command'.",
			"Script blocks also have commands; they are related to opcodes, but there are more opcodes (barely) than there are script commands. I will use 'script commands' (or simply 'commands' when there is no ambiguity) to mean commands from script blocks as opposed to opcodes + parameters.",
			"The basic syntax of a script block is:",
			), 0
		);
	code_block("script item opt_script_delay script_command", false, false, 4);
	text("(note to those who already know $ucc: I have included the ';' in the definition of script_command, so including it above would cause a compile error) for a block with a single command, or", 0);
	code_block("script obj opt_script_delay {script_command_list};", false, false, 4);
	text("for blocks with one or more commands. In both cases, we have that:", 0);
	add_list(
		array(
			inline_code("obj") . " can be any object or NPC and is " . bold("required") . ";",
			inline_code("opt_script_delay") . " is an optional delay in ticks, and has syntax 'after XX ticks', with XX being the delay in ticks;",
			inline_code("script_command") . " is a (script) command which MUST terminate in a ';';",
			inline_code("script_command_list") . " is a list of one or more script_commands, each of which MUST have a terminating ';'.",
			), true, 4
		);
	text(
		array(
			"Also in both cases, spaces, tabs and line breaks between commands (but not " . bold("within") . " a command - there must be at least one tab or space between the root and parameters and between parameters) are ignored. It is good practice then (and helps readability of the code) if you add spaces and identation to clearly delineate each command.",
			"Time now for the commands of the script block. There is (" . add_tip("AFAIK", "As Far As I Know") . ") no real table of commands other than what can be gleaned from the ucparse.yy file from the Exult source. For this reason, I went through the trouble of compiling the following list and explaining what they do:",
			), 0
		);
	make_header(anchor("table1") . "Table 1: $ucc Script Commands", 1);
    table(
        array(
    		array(bold("COMMAND"), bold("OPCODE"), bold("DESCRIPTION"), ),
            array(inline_code("continue;"), inline_code("0x01"), "Continues script without painting"),
            array(inline_code("repeat int_exp script_command;"), inline_code("0x0b"), "Repeats the command(s) in script_command a number of times equal to int_exp"),
            array(inline_code("nop;"), inline_code("0x21"), "Does nothing"),
            array(inline_code("nohalt;"), inline_code("0x23"), "Script cannot be halted by UI_halt_scheduled and does not prevent the actor from moving on its own"),
            array(inline_code("wait int_exp;"), inline_code("0x27"), "Waits int_exp ticks"),
            array(inline_code("wait int_exp hours;"), inline_code("0x29"), "Waits int_exp hours"),
            array(inline_code("remove;"), inline_code("0x2d"), "Deletes item and halts the script"),
            array(inline_code("descent;"), inline_code("0x38"), "Decreases lift (z coordinate) by 1"),
            array(inline_code("rise;"), inline_code("0x39"), "Increases lift (z coordinate) by 1"),
            array(inline_code("frame int_exp;"), inline_code("0x46"), "Sets the frame for item to int_exp"),
            array(inline_code("actor frame int_lit;"), inline_code("0x61+int_lit"), "Sets the frame for an NPC and keeps facing the same direction*"),
            array(inline_code("hatch;"), inline_code("0x48"), "If item is an egg, activates it"),
            array(inline_code("setegg int_exp, int_exp;"), inline_code("0x49"), "Changes an egg's activation conditions. The first int_exp sets the criteria, the second sets the distance"),
            array(inline_code("next frame;"), inline_code("0x4d"), "Increases current frame by 1, stops at maximum"),
            array(inline_code("next frame cycle;"), inline_code("0x4e"), "Increases current frame by 1, wrap to 0 at max"),
            array(inline_code("previous frame;"), inline_code("0x4f"), "Decreases current frame by 1, stops at 0"),
            array(inline_code("previous frame cycle;"), inline_code("0x50"), "Decreases current frame by 1, wrap to max at 0"),
            array(inline_code("say text_exp;"), inline_code("0x52"), "Actor says text_exp"),
            array(inline_code("step int_exp;"), inline_code("0x53"), "Steps in direction specified by int_exp**"),
            array(inline_code("step dir;"), inline_code("0x30+dir"), "Steps in direction specified by dir***"),
            array(inline_code("music int_exp;"), inline_code("0x54"), "Plays music number int_exp"),
            array(inline_code("call fun;"), inline_code("0x55"), "Calls function fun with event = 2****"),
            array(inline_code("call fun, int_lit;"), inline_code("0x80"), "Calls function fun with event = int_lit****"),
            array(inline_code("speech int_exp;"), inline_code("0x56"), "Plays speech track number int_exp"),
            array(inline_code("sfx int_exp;"), inline_code("0x58"), "Plays sound effect number int_exp"),
            array(inline_code("face int_exp;"), inline_code("0x59"), "Turns to face direction int_exp**"),
            array(inline_code("hit int_exp;"), inline_code("0x78"), "Item attacked, loses int_exp hits"),
            array(inline_code("resurrect;"), inline_code("0x81"), "Brings actor back to life"),
            array(inline_code("finish;"), inline_code("0x2c"), "Finishes script if item is killed?"),
            array(inline_code("attack;"), inline_code("0x7a"), "Attacks using information from previous '" . inline_code("set_to_attack") . "' intrinsic call"),
	        ), 0
        );
    table(
        array(
    		array("*", "For the actor frame int_lit, $ucc will convert int_lit will into a value between 0-15, so you may want to stick to these values."),
    		array("**", "north = 0, northeast = 1, east = 2, etc. up to northwest = 7"),
    		array("***", "dir can be one of the following: north, ne, east, se, south, sw, west, nw"),
    		array("****", "A few common values for event:\n" .
            	add_list(
            		array(
            			"0: Object on-screen or nearby, called every few seconds",
        				"1: Object is double-clicked",
        				"2: Scripted, triggered by usecode",
        				"3: Egg event",
        				"4: Object is used as a weapon",
        				"5: An item is readied (worn)",
        				"6: An item is unreadied (removed)",
        				"7: Died ($si only?)",
        				"9: When an NPC wants to talk to you ($si only)",
                		), -1, $htmlmode ? 0 : 12, false
                	)
            	),
	        ), 0, 0
        );
	text("(yes, the ';'s are required) For future convenience, I've added an opcode equivalence for all commands. The parameters on the table have the following meanings:", 0);
    add_list(
    	array(
        	"int_lit: Any number;",
        	"int_exp: Any number or expression that evaluates to a number (such as constants or even functions);",
        	"text_exp: Any string or constant string;",
        	"fun: Any function name or number;",
        	"script_command: for repeat, a list of one or more commands terminating in a ';'. For more than one command, script_command MUST be enclosed in clurly braces '{' and '}'.",
			), true, 4
		);
	text(
		array(
			"As far as script blocks go, that is it. There are a few opcodes with no equivalence to $ucc scripts (but we can bug the Exult devs to include in the future ;-)), but I will defer these to a later section.",
			"To help fix the ideas above, a few exemples are in order:",
	        ), 0
        );
	text("Orb of the Moons' Moongate animation (the item moongate is assumed to exist). View all frames of shape 779 in Exult Studio to fully see what this script does. This script is slightly different from the original one in " . add_tip("BG", "Black Gate") . ".", 4);
	code_file("moongate.uc", false, true, 4);
	text("Loom animation. This is the animation of the loom and of the avatar when you double-click a thread then target the loom. The loom is shape 261. This example uses function " . inline_code("0x827") . ", which has been aliased as getDirectionDirectionToObject.", 4);
	code_file("loom.uc", false, true, 4);

	make_header("Translating From execute_usecode_array calls to $ucc Scripts", 1);
	text("Time now to go about understanding '$eua' calls. The best way to do that is, unsurprisingly, to convert them to script blocks. I will now list the all the opcodes and give them friendly pseudo-names taken from 'ucscriptop.h'.", 0);

	make_header(anchor("table2") . "Table 2: UI_execute_usecode_array OpCodes", 1);
    table(
        array(
    		array(bold("COMMAND"), bold("OPCODE"), bold("DESCRIPTION"), ),
            array(inline_code("cont"), inline_code("0x01"), "Continues script without painting"),
            array(inline_code("repeat(offset, cnt)"), inline_code("0x0b"), "Repeats all commands since offset opcodes/params ago cnt times*"),
            array(inline_code("repeat2(offset, cnt1, cnt2)"), inline_code("0x0c"), "Loops cnt2 times, each time repeating commands since offset opcodes/params ago cnt1 times*"),
            array(inline_code("nop"), inline_code("0x21"), "Does nothing."),
            array(inline_code("dont_halt"), inline_code("0x23"), "Script cannot be halted by UI_halt_scheduled?"),
            array(inline_code("delay_ticks(cnt)"), inline_code("0x27"), "Waits cnt ticks"),
            array(inline_code("delay_hours(cnt)"), inline_code("0x29"), "Waits cnt hours"),
            array(inline_code("finish"), inline_code("0x2c"), "Finishes script if item is killed?"),
            array(inline_code("remove"), inline_code("0x2d"), "Deletes item and halts the script"),
            array(inline_code("step_n"), inline_code("0x30"), "Steps towards north"),
            array(inline_code("step_ne"), inline_code("0x31"), "Steps towards northeast"),
            array(inline_code("step_e"), inline_code("0x32"), "Steps towards east"),
            array(inline_code("step_se"), inline_code("0x33"), "Steps towards southeast"),
            array(inline_code("step_s"), inline_code("0x34"), "Steps towards south"),
            array(inline_code("step_sw"), inline_code("0x35"), "Steps towards southwest"),
            array(inline_code("step_w"), inline_code("0x36"), "Steps towards west"),
            array(inline_code("step_nw"), inline_code("0x37"), "Steps towards northwest"),
            array(inline_code("descent"), inline_code("0x38"), "Decreases lift (z coordinate) by 1"),
            array(inline_code("rise"), inline_code("0x39"), "Increases lift (z coordinate) by 1"),
            array(inline_code("frame(frnum)"), inline_code("0x46"), "Sets the frame for item to frnum"),
            array(inline_code("egg"), inline_code("0x48"), "If item is an egg, activates it"),
            array(inline_code("set_egg(crit, dist);"), inline_code("0x49"), "Changes an egg's activation conditions: 'crit' is the criteria, 'dist' the distance"),
            array(inline_code("next_frame_max"), inline_code("0x4d"), "Increases current frame by 1, stops at maximum"),
            array(inline_code("next_frame"), inline_code("0x4e"), "Increases current frame by 1, wrap to 0 at max"),
            array(inline_code("prev_frame_min"), inline_code("0x4f"), "Decreases current frame by 1, stops at 0"),
            array(inline_code("prev_frame"), inline_code("0x50"), "Decreases current frame by 1, wrap to max at 0"),
            array(inline_code("say(text)"), inline_code("0x52"), "Actor says text"),
            array(inline_code("step(dir)"), inline_code("0x53"), "Steps in direction specified by dir (0-7)"),
            array(inline_code("music(tracknum)"), inline_code("0x54"), "Plays music number tracknum"),
            array(inline_code("usecode(fun)"), inline_code("0x55"), "Calls function fun with event = 2"),
            array(inline_code("speech(tracknum)"), inline_code("0x56"), "Plays speech number tracknum"),
            array(inline_code("sfx(sfxnum)"), inline_code("0x58"), "Plays sound effect number sfxnum"),
            array(inline_code("face_dir(dir)"), inline_code("0x59"), "Turns to face direction dir (0-7)"),
            array(inline_code("npc_frame"), inline_code("0x61-0x70"), "Sets the frame for an NPC and keeps facing the same direction (new frame = opcode - " . inline_code("0x61") . ")"),
            array(inline_code("hit(dam)"), inline_code("0x78"), "Item attacked, loses dam hits"),
            array(inline_code("usecode2(fun, eventid)"), inline_code("0x80"), "Calls function fun with event = eventid"),
            array(inline_code("resurrect"), inline_code("0x81"), "Brings the actor back to life"),
            array(inline_code("attack"), inline_code("0x7a"), "Attacks using information from previous '" . inline_code("set_to_attack") . "' intrinsic call"),
	        ), 0
        );
	text(
        array(
        	"*    For a better explanation of these opcodes, see the examples below.",
        	"By looking at the tables, one sees that repeat2 is the only one without a $ucc script equivalent. The last two opcodes (usecode2 and resurrect) are Exult only - they do not exist in the original games.",
        	"In all cases, the parameters are 2-byte hex numbers while the opcodes are single-byte hex numbers. This means that parameters should be written with four digits after the '" . inline_code("0x") . "'.",
        	"I will now give an example of how to translate between '$eua' and $ucc scripts. I will begin with the example I picked from Erethian above; namely:"
        	), 0
        );
	text("Erethian animation #1:", 4);
	code_file("erethian_an_ailem_0.uc", false, true, 8);
	text("The first thing I will do is identify parameters and opcodes. As I said, parameters are 2-byte hex numbers; so the opcodes above are " . inline_code("0x6F") . ", " . inline_code("0x01") . ", " . inline_code("0x52") . ", " . inline_code("0x27") . ", " . inline_code("0x70") . " and " . inline_code("0x27") . " (again). This means that the above block is executed along the lines of:", 4);
	code_file("erethian_an_ailem_1.uc", false, true, 8);
	text("Were (say) " . inline_code("0x27(0x0001)") . " means 'do " . inline_code("0x27") . " with " . inline_code("0x0001") . " as parameter'. Now we begin the conversion process: since we are dealing with '$eua', we don't have a delay to worry about. So our script block begins with '" . inline_code("script item") . "'. Looking at " . add_link("Table 1", "#table1") . ", above, we see that " . inline_code("0x6F (= 0x61 + 0x0E)") . " converts to '" . inline_code("actor frame 0x0E;") . "', " . inline_code("0x27(num)") . " converts to '" . inline_code("wait num;") . "', " . inline_code("0x01") . " converts to '" . inline_code("continue;") . "', " . inline_code("0x52(\"@An Ailem!\")") . " converts to '" . inline_code("say \"@An Ailem!\";") . "' and " . inline_code("0x70") . " becomes '" . inline_code("actor frame 0x0F;") . "'. Thus:", 4);
	code_file("erethian_an_ailem_2.uc", false, true, 8);
	text("That is, Erethian will raise his arms (frame " . inline_code("14 = 0x0E") . ") and keep looking in the same direction, then he waits 1 tick, says " . inline_code("\"@An Ailem!\"") . ", waits 3 more ticks, spreads his arms (frame " . inline_code("15 = 0x0F") . ") without changing facing and wait 6 more ticks. The '" . inline_code("@") . "', by the way, is an escape character for double quotes (i.e., it will be replaced by a double-quote when it is about to be displayed).", 4);
	text("An example of a script with a delay is also found in Erethian's usecode:", 0);
	text("Erethian animation #2, delayed usecode:", 4);
	code_file("erethian_follow_0.uc", false, true, 8);
	text("'$deua' calls will always convert to scripts with a delay; the delay is equal to the third parameter in the call. Proceeding as above, we have", 4);
	code_file("erethian_follow_1.uc", false, true, 8);
	text("Simple enough, right? Lets now work with an example involving a loop. For this example, I will take the usecode for a loom (shape 261); in it, we have following usecode:", 4);
	text("Loom animation (shape 261):", 4);
	code_file("loom_0.uc", false, true, 8);
	text("(getDirectionDirectionToObject is function " . inline_code("0x827") . ") Separating the opcodes, we get", 4);
	code_file("loom_1.uc", false, true, 8);
	text("Now, in hex, " . inline_code("0xFFFC = -4") . " (since " . inline_code("0x10000 - 4 = 0xFFFC") . "), and " . inline_code("0xFFFB = -5") . ", so we have (using the friendly names defined above) that", 4);
	code_file("loom_2.uc", false, true, 8);
	text(
		array(
			"Since " . inline_code("0x0105 = 261") . ", " . inline_code("usecode(0x0105)") . " is calling the loom function again. Time now to work out what the repeat means before proceeding any further. I know that the explanation from the table isn't very enlightening on what the offset means, which is why I chose this example.",
			"The 'prototype' of repeat is " . inline_code("repeat(offset, cnt)") . ". The offset determines how many opcodes and parameters before the repeat instruction will be repeated, while the cnt indicates how many times they will be repeated. For example, " . inline_code("sfx(0x0006)") . " is 1 opcode and 1 parameter, while cont and next_frame are 1 opcode each. Thus, " . inline_code("repeat(-4, 0x0020)") . " will repeat the commands " . inline_code("next_frame") . ", " . inline_code("cont") . " and " . inline_code("sfx(0x0006)") . " 32 (" . inline_code("=0x0020") . ") times in that order. The " . inline_code("repeat(-5, 0x0009)") . " will likewise repeat the commands from " . inline_code("cont") . " to " . inline_code("delay_ticks(0x0001)") . " (remember that " . inline_code("npcframe_0") . " and " . inline_code("npcframe_6") . " are 1 opcode and no parameters each) 9 (" . inline_code("=0x0009") . ") times each. Putting it all together, we end up with:",
			), 4
		);
	code_file("loom.uc", false, true, 8);
	text("The above code is equivalent to the original loom code with '$eua', and is the same as the one I presented above as an example. All that remains now is to implement the rest of the Loom function and we could even compile it.", 4);
?>