<?php
	text("The intrinsic prototypes below are in $ucc-esque form. It is actually more like C than $ucc. Specifically, all parameters have a type instead of the $ucc-'" . inline_code("var") . "'. The parameter type indicates what Exult will be expecting; the $ucc compiler won't care in the slightest what you pass as a parameter. The parameter types I use are as follows:", 0);
	add_keylist(
		array(
				"Keyword", "Description",
				inline_code("int"), "This means any integer, positive or negative.",
	        	inline_code("object"), "Any object or NPC. It can be an object reference, '" . inline_code("item") . "' or a number (that " . bold("must") . " be negative, which Exult will convert to an NPC if it is in the correct range).",
	        	inline_code("actor"), "Any NPC. It is evaluated the same way as '" . inline_code("object") . "' is, but Exult will reject anything that can't be converted to an NPC. Monsters are also accepted.",
	        	inline_code("bool"), "A '$true'/'$false' parameter. Can be a number (nonzero/zero), an array (non-empty/empty) or a comparison expression (e.g., '" . inline_code("a == b") . "'.",
	        	inline_code("string"), "A string (text). Strings in usecode are any set of characters surrounded by double-quotes; for example, \"This is a string.\". If you need a double-quote inside a string you can 'escape' it by prefixing them with a backslash: \"\\\"\"; alternatively, Exult converts '@' into a double-quote.",
	        	inline_code("function"), "A usecode function, which " . bold("must") . " be declared with either, the " . inline_code("shape#") . " " . italic("or") . " the " . inline_code("object#") . " specifiers. In $ucc, this can be the function name or its usecode number. For example: '" . inline_code("extern Bolt shape#(0x2D3) ();") . "' can be passed as '" . inline_code("Bolt") . "' (the function name), '" . inline_code("0x2D3") . "' (its function number since '" . inline_code("shape#(shnum) == shnum") . "' if " . inline_code("shnum < 0x400") . ") or as '" . inline_code("&Bolt") . "' (using the 'address of' operator '" . inline_code("&") . "' to get the function number).",
        	), 4
        );
	text(
		array(
        	"If the parameter name is followed by a '" . inline_code("[]") . "', it indicates an array with elements of the specified type. Example: '" . inline_code("actor npc[]") . "' means an array of NPCs. If there is a number between the brackets, it means an array of that length; for example, '" . inline_code("int num[3]") . "' means an array with 3 '" . inline_code("int") . "' elements. In some cases, an array can be of type '" . inline_code("mixed") . "' to indicate that not all of the array's elements are of the same type.",
        	"Some intrinsics are 'overloaded'; i.e., they accept more than one parameter type. In those cases, all of the possibilities are listed as prototypes.",
        	"If the parameter list is simply '" . inline_code("[special]") . "', see the description for details.",
        	"If the intrinsic is preceded by a parameter type, it means that the intrinsic returns something of that type; the description explains the return value. In some cases, the return value can be '" . inline_code("mixed[]") . "' to indicate that the intrinsic returns an array, not all of which are of the same type.",
        	"All intrinsics can be called as presented in the list. If an intrinsic has at least one parameter, it can be called in 'calle' form, with the first parameter as its '" . inline_code("object") . "'. Example:",
			), 0
		);
	code_block("int UI_execute_usecode_array(object obj, int script[]);\nint obj->execute_usecode_array(int script[]);", true, false, 4);
	text(
		array(
        	"The first parameter and the '" . inline_code("->") . "' can both be omitted if '" . inline_code("obj") . "' is '" . inline_code("item") . "', and if you omit either of them you " . bold("must") . " omit both or the Usecode will fail to compile. For stylistic purposes, the 'calle' form should be used only when the first parameter is an object or NPC (or '" . inline_code("item") . "'). For all intrinsics with 'appropriate' parameter types, I have listed both forms in the list below.",
        	"Also, you may have noticed that I did not include the parameter type of '" . inline_code("obj") . "' when I gave the 'calle' form of execute_usecode_array; since I will only give the 'calle' form when the parameter type is '" . inline_code("object") . "' or '" . inline_code("actor") . "', I feel that it is unneeded.",
			), 0
		);
?>